{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","api.ts","PeopleContext.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","utils/classChange.ts","components/Navbar.tsx","components/HomePage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","initialTabContext","people","findPersonFather","findPersonMother","isLoading","setIsLoading","setIsPageActive","error","sex","centuriesUrl","query","filterPeople","setSearchParams","person","father","find","p","name","fatherName","slug","mother","motherName","PeopleContext","createContext","PeopleContent","useState","setPeople","isPageActive","setError","get","getAll","useEffect","getPeople","usersFromServer","catch","finally","Provider","filteredPeople","queryLowerCase","toLowerCase","filter","includes","length","year","born","Math","ceil","centuries","PeopleFilters","useContext","className","cn","type","placeholder","onChange","e","target","map","item","century","Loader","PersonLink","personSlug","useParams","href","died","PeopleTable","PeoplePage","classChange","isActive","Navbar","role","onClick","HomePage","App","path","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.77e15cea.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { useSearchParams, SetURLSearchParams } from 'react-router-dom';\nimport { getPeople } from './api';\nimport { Person } from './types';\n\ntype Context = {\n  people: Person[]\n  findPersonFather: (people: Person[], person: Person) => string | undefined\n  findPersonMother: (people: Person[], person: Person) => string | undefined\n  isLoading: boolean,\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n  setIsPageActive: React.Dispatch<React.SetStateAction<boolean>>\n  error: string | null\n  sex: string\n  centuriesUrl: string[]\n  searchParams: URLSearchParams\n  query: string\n  filterPeople: () => Person[]\n  setSearchParams: SetURLSearchParams\n};\n\ntype Props = {\n  children: React.ReactNode\n};\n\nconst initialTabContext: Context = {\n  people: [],\n  findPersonFather: () => undefined,\n  findPersonMother: () => undefined,\n  isLoading: false,\n  setIsLoading: () => { },\n  setIsPageActive: () => { },\n  error: null,\n  sex: '',\n  centuriesUrl: [],\n  searchParams: new URLSearchParams(),\n  query: '',\n  filterPeople: () => [],\n  setSearchParams: () => {},\n};\n\nconst findPersonFather = (people: Person[], person: Person) => {\n  const father = people.find(p => p.name === person.fatherName);\n\n  return father?.slug;\n};\n\nconst findPersonMother = (people: Person[], person: Person) => {\n  const mother = people.find(p => p.name === person.motherName);\n\n  return mother?.slug;\n};\n\nconst getCentury = (year: number) => {\n  return (\n    Math.ceil(year / 100).toString()\n  );\n};\n\nexport const PeopleContext = createContext<Context>(initialTabContext);\n\nexport const PeopleContent: React.FC<Props> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPageActive, setIsPageActive] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex') || '';\n  const centuriesUrl = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  const filterPeople = () => {\n    let filteredPeople = people;\n\n    if (query) {\n      const queryLowerCase = query.toLowerCase();\n\n      filteredPeople = filteredPeople\n        .filter(person => person.name.toLowerCase().includes(queryLowerCase)\n      || (person.fatherName && person.fatherName.toLowerCase()\n        .includes(queryLowerCase))\n      || (person.motherName && person.motherName.toLowerCase()\n        .includes(queryLowerCase)));\n    }\n\n    if (sex) {\n      filteredPeople = filteredPeople.filter(person => person.sex === sex);\n    }\n\n    if (centuriesUrl && centuriesUrl.length > 0) {\n      filteredPeople = filteredPeople.filter(person => centuriesUrl\n        .includes(getCentury(person.born)));\n    }\n\n    return filteredPeople;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(usersFromServer => {\n        setPeople(usersFromServer);\n      })\n      .catch(() => {\n        setError('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [isPageActive]);\n\n  return (\n    <PeopleContext.Provider value={{\n      people,\n      findPersonFather,\n      findPersonMother,\n      isLoading,\n      setIsLoading,\n      setIsPageActive,\n      error,\n      sex,\n      centuriesUrl,\n      searchParams,\n      query,\n      filterPeople,\n      setSearchParams,\n    }}\n    >\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { PeopleContext } from '../PeopleContext';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuries = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const {\n    sex,\n    query,\n    setSearchParams,\n    searchParams,\n    centuriesUrl,\n  } = useContext(PeopleContext);\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(searchParams, (\n      { query: e.target.value || null }\n    ));\n\n    setSearchParams(search);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn('',\n            { 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn('',\n            { 'is-active': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn('',\n            { 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(item => {\n              return (\n                <SearchLink\n                  data-cy=\"century\"\n                  className={cn('button mr-1',\n                    { 'is-info': centuriesUrl.includes(item) })}\n                  params={{\n                    centuries: centuriesUrl.includes(item)\n                      ? centuriesUrl.filter(century => century !== item)\n                      : [...centuriesUrl, item],\n                  }}\n                >\n                  {item}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success',\n                { 'is-outlined': centuriesUrl.length > 0 })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { useContext } from 'react';\nimport { Person } from '../types';\nimport { PeopleContext } from '../PeopleContext';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n  const {\n    findPersonFather,\n    findPersonMother,\n    people,\n  } = useContext(PeopleContext);\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn('',\n        { 'has-background-warning': personSlug === person.slug })}\n    >\n      <td>\n        <a\n          href={`#/people/${person.slug}`}\n          className={cn('', { 'has-text-danger': person.sex === 'f' })}\n        >\n          {person.name}\n        </a>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      {findPersonMother(people, person)\n        ? (\n          <td>\n            <a\n              href={`#/people/${findPersonMother(people, person)}`}\n              className=\"has-text-danger\"\n            >\n              {person.motherName}\n            </a>\n          </td>\n        )\n        : <td>{person.motherName ? person.motherName : '-'}</td>}\n      {findPersonFather(people, person)\n        ? (\n          <td>\n            <a href={`#/people/${findPersonFather(people, person)}`}>\n              {person.fatherName}\n            </a>\n          </td>\n        )\n        : <td>{person.fatherName ? person.fatherName : '-'}</td>}\n    </tr>\n  );\n};\n","import { useContext } from 'react';\nimport { PeopleContext } from '../PeopleContext';\nimport { PersonLink } from './PersonLink';\n\nexport const PeopleTable: React.FC = () => {\n  const {\n    filterPeople,\n  } = useContext(PeopleContext);\n\n  return (\n    <tbody>\n      {filterPeople()?.map(person => {\n        return (\n          <PersonLink person={person} key={person.slug} />\n        );\n      })}\n    </tbody>\n  );\n};\n","import { useContext } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { PeopleContext } from '../PeopleContext';\n\nexport const PeoplePage = () => {\n  const { isLoading, error, people } = useContext(PeopleContext);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              <div className=\"box table-container\">\n                {error\n                  && (\n                    <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                      Something went wrong\n                    </p>\n                  )}\n                {!isLoading && people.length === 0 && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n                {isLoading && !error ? <Loader /> : (\n                  <>\n                    <table\n                      data-cy=\"peopleTable\"\n                      className=\"\n                      table\n                      is-striped\n                      is-hoverable\n                      is-narrow\n                      is-fullwidth\n                      \"\n                    >\n                      <thead>\n                        <tr>\n                          <th>Name</th>\n                          <th>Sex</th>\n                          <th>Born</th>\n                          <th>Died</th>\n                          <th>Mother</th>\n                          <th>Father</th>\n                        </tr>\n                      </thead>\n\n                      <PeopleTable />\n                    </table>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import cn from 'classnames';\n\ntype ClassChangeProps = {\n  isActive: boolean;\n};\n\nexport const classChange = ({ isActive }: ClassChangeProps) => cn(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n","import { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { classChange } from '../utils/classChange';\nimport { PeopleContext } from '../PeopleContext';\n\nexport const Navbar = () => {\n  const { setIsPageActive } = useContext(PeopleContext);\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={classChange}\n            to=\"/\"\n            onClick={() => setIsPageActive(false)}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={classChange}\n            to=\"/people\"\n            onClick={() => setIsPageActive(true)}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":personSlug?\" />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n            <Route path=\"home\" element={<Navigate to=\"/\" />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeopleContent } from './PeopleContext';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <PeopleContent>\n        <App />\n      </PeopleContent>\n    </Router>,\n  );\n"],"sourceRoot":""}